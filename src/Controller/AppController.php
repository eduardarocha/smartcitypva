<?php
declare(strict_types=1);

/**
 * CakePHP(tm) : Rapid Development Framework (https://cakephp.org)
 * Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 *
 * Licensed under The MIT License
 * For full copyright and license information, please see the LICENSE.txt
 * Redistributions of files must retain the above copyright notice.
 *
 * @copyright Copyright (c) Cake Software Foundation, Inc. (https://cakefoundation.org)
 * @link      https://cakephp.org CakePHP(tm) Project
 * @since     0.2.9
 * @license   https://opensource.org/licenses/mit-license.php MIT License
 */
namespace App\Controller;

use Cake\Controller\Controller;
use Cake\Datasource\ConnectionManager;
use Cake\Event\EventInterface;

/**
 * Application Controller
 *
 * Add your application-wide methods in the class below, your controllers
 * will inherit them.
 *
 * @link https://book.cakephp.org/4/en/controllers.html#the-app-controller
 */
class AppController extends Controller
{
    /**
     * Initialization hook method.
     *
     * Use this method to add common initialization code like loading components.
     *
     * e.g. `$this->loadComponent('FormProtection');`
     *
     * @return void
     */
    public function initialize(): void
    {
        parent::initialize();

        $this->loadComponent('Flash');

        /*
         * Enable the following component for recommended CakePHP form protection settings.
         * see https://book.cakephp.org/4/en/controllers/components/form-protection.html
         */
        //$this->loadComponent('FormProtection');
        $GLOBALS['connection'] = ConnectionManager::get('default');
    }

    public function beforeFilter(EventInterface $event)
    {
        parent::beforeFilter($event); // TODO: Change the autogenerated stub

        if ($this->request->getAttributes()['params']['controller'] != 'Users') {
            if (empty($this->request->getHeader('hash')) OR empty($this->request->getHeader('user')) OR !$this->authvalida($this->request->getHeader('hash')[0], $this->request->getHeader('user')[0])) {
                $event->setResult(
                    $this->response
                        ->withHeader('Access-Control-Allow-Origin', '*')
                        ->withStatus(403)
                        ->withType("application/json")
                        ->withStringBody(json_encode('Usuário não Autorizado'))
                );
            }
        }
    }

    protected function authvalida($hash, $user) {
        $autenticacaos = $this->fetchTable('Autenticacaos');

        if (empty($autenticacaos->find()->where(['user_id' => $user])->where(['hash' => $hash])->where(['expira >=' => date('Y-m-d')])->toArray())) {
            return false;
        }

        return true;
    }

    protected function verificaFoto($form) {
        if (empty($form['imageFile'])) {
            return 'Foto deve ser enviada';
        } else if (explode('/', $form['imageFile']->getClientMediaType())[1] != 'webp') {
            return 'Formato da foto deve ser webp';
        } else if ($form['imageFile']->getSize() >= 2000000) {
            return 'Tamanho máximo da foto é de 2MB';
        }

        return null;
    }

    protected function salvarFotos($form, $nomeArquivo, $caminho) {
        try {
            $arquivo = $form['imageFile'];
            $pastaDestino = WWW_ROOT . 'img' . DS . $caminho . DS;
            $arquivo->moveTo($pastaDestino . $nomeArquivo);
        } catch (\Exception $e) {
            return false;
        }
        return true;
    }
}
